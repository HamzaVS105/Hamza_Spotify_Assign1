# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19o9WxHwyYtoiIbTwOGyBp6FD3Tq-KZOP
"""

import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from scipy.stats import pearsonr

# Load user-item interaction data from a CSV file
file_path = '/content/drive/MyDrive/rating_matrix.csv'  # Replace with your file path
user_item_df = pd.read_csv(file_path, index_col='Username')

# Fill missing values with 0 (no interaction)
user_item_df.fillna(0, inplace=True)

def calculate_cosine_similarity(matrix):
    return cosine_similarity(matrix)

def calculate_pearson_correlation(matrix):
    pearson_sim_matrix = np.corrcoef(matrix.T)
    return pearson_sim_matrix

user_cosine_similarity = calculate_cosine_similarity(user_item_df)
item_cosine_similarity = calculate_cosine_similarity(user_item_df.T)

user_pearson_correlation = calculate_pearson_correlation(user_item_df)
item_pearson_correlation = calculate_pearson_correlation(user_item_df.T)

def predict_ratings(user_item_matrix, similarity_matrix, type='user'):
    predicted_ratings = np.zeros(user_item_matrix.shape)

    if type == 'user':
        for i in range(user_item_matrix.shape[0]):
            similar_users = similarity_matrix[i]
            for j in range(user_item_matrix.shape[1]):
                predicted_ratings[i, j] = (
                    similar_users @ user_item_matrix.iloc[:, j]
                ) / np.sum(np.abs(similar_users))
    elif type == 'item':
        for i in range(user_item_matrix.shape[1]):
            similar_items = similarity_matrix[i]
            for j in range(user_item_matrix.shape[0]):
                predicted_ratings[j, i] = (
                    similar_items @ user_item_matrix.iloc[j, :]
                ) / np.sum(np.abs(similar_items))

    return pd.DataFrame(predicted_ratings, index=user_item_matrix.index, columns=user_item_matrix.columns)

# Predict ratings using both user and item-based collaborative filtering
user_based_predictions = predict_ratings(user_item_df, user_cosine_similarity, type='user')
item_based_predictions = predict_ratings(user_item_df, item_cosine_similarity, type='item')

def get_top_n_recommendations(predictions, user, n=5):
    user_ratings = predictions.loc[user]
    top_recommendations = user_ratings.sort_values(ascending=False).head(n)
    return top_recommendations

# Example: Get top 5 recommendations for user 'beatbuster'
print(get_top_n_recommendations(user_based_predictions, 'beatbuster'))